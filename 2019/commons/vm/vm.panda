module vm

require java:collections

import org.panda_lang.utilities.commons.StringUtils

public class VM {

    public Long launch(Long[] instructions, Long[] values) {
        Long[] process = Arrays.copyOf(instructions, instructions.size()) as Long[]
        Stack input = new Stack()

        for (mut Int index = 0; index < values.size(); index++) {
            input.push(values[values.size() - index - 1])
        }

        Program program = new Program(instructions, input)
        return program.execute()
    }

    public Long[] toCodes(String data) {
        String[] content = data.split(',')
        Long[] codes = new Long[100_000]

        for (mut Int point = content.size(); point < codes.size(); point++) {
            codes[point] = 0L
        }

        for (mut Int point = 0; point < content.size(); point++) {
            codes[point] = Long.parseLong(content[point])
        }

        return codes
    }

}

local class Program {

    local static Int ADD = 1
    local static Int MULTIPLY = 2
    local static Int INPUT = 3
    local static Int OUTPUT = 4
    local static Int JUMP_IF_TRUE = 5
    local static Int JUMP_IF_FALSE = 6
    local static Int LESS_THAN = 7
    local static Int EQUALS = 8
    local static Int RELATIVE = 9
    local static Int EXIT = 99

    local Long[] process
    local Stack input
    local mut Int pointer = 0
    local mut Int relative = 0
    local mut Long output = 0
    local mut Bool running = true

    constructor (Long[] process, Stack input) {
        this.process = process
        this.input = input
    }

    // 109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99
    // Steps:
    //   109 => relative + process[pointer + 1] = 0 + 1 = 1, pointer 2
    //   204 => output process[relative + process[pointer + 1]] = output process[-1 + 1] = out 109, pointer = 4
    //   -1
    local Long execute() {
        while running {
            Long parameter = process[pointer]
            String fixedParameter = StringUtils.buildSpace(5 - parameter.toString().length()).replace(' ', '0') + parameter.toString()
            Int opcode = Int.parseInt(fixedParameter.substring(3).toString())

            String[] modes = new String[3]
            modes[2] = fixedParameter.charAt(0).toString()
            modes[1] = fixedParameter.charAt(1).toString()
            modes[0] = fixedParameter.charAt(2).toString()

            if opcode == ADD {
                // log 'ADD', select(1, modes) + ' + ' + select(2, modes) + ' = ' + (select(1, modes) + select(2, modes)), select(3, modes), pointer, parameter
                set(3, modes, select(1, modes) + select(2, modes))
                pointer = pointer + 4
            }
            else if opcode == MULTIPLY {
                // log 'SET', select(1, modes) + ' * ' + select(2, modes) + ' = ' + (select(1, modes) + ' * ' + select(2, modes)), pointer, parameter
                set(3, modes, select(1, modes) * select(2, modes))
                pointer = pointer + 4
            }
            else if opcode == INPUT {
                // log 'INPUT', input.peek(), pointer, parameter
                set(1, modes, input.pop() as Long)
                pointer = pointer + 2
            }
            else if opcode == OUTPUT {
                // log 'OUTPUT', select(1, modes), pointer, parameter
                log '>> ' + (output = select(1, modes))
                pointer = pointer + 2
            }
            else if opcode == JUMP_IF_TRUE {
                if select(1, modes) != 0L {
                    // log 'JUMP_IF_TRUE', select(1, modes), select(2, modes), pointer, parameter
                    pointer = toInt(select(2, modes))
                }
                else {
                    // log 'JUMP_IF_TRUE', pointer, parameter
                    pointer = pointer + 3
                }
            }
            else if opcode == JUMP_IF_FALSE {
                if select(1, modes) == 0L {
                    // log 'JUMP_IF_FALSE', select(1, modes), select(2, modes), pointer, parameter
                    pointer = toInt(select(2, modes))
                }
                else {
                    // log 'JUMP_IF_FALSE', pointer, parameter
                    pointer = pointer + 3
                }
            }
            else if opcode == LESS_THAN {
                if select(1, modes) < select(2, modes) {
                    // log 'LESS_THAN', select(1, modes) + ' < ' + select(2, modes), pointer, parameter
                    set(3, modes, 1L)
                }
                else {
                    // log 'LESS_THAN', pointer, parameter
                    set(3, modes, 0L)
                }
                pointer = pointer + 4
            }
            else if opcode == EQUALS {
                if select(1, modes) == select(2, modes) {
                    // log 'EQUALS', select(1, modes) + ' == ' + select(2, modes), pointer, parameter
                    set(3, modes, 1L)
                }
                else {
                    // log 'EQUALS', pointer, parameter
                    set(3, modes, 0L)
                }
                pointer = pointer + 4
            }
            else if opcode == RELATIVE {
                relative = relative + select(1, modes)
                pointer = pointer + 2
                // log 'RELATIVE', relative, pointer, parameter
            }
            else if opcode == EXIT {
                running = false
                // log 'EXIT'
            }
            else {
                throw new RuntimeException('Unknown opcode ' + parameter + ' with pointer ' + pointer)
            }
        }

        return output
    }

    local set(Int parameter, String[] modes, Long value) {
        String mode = modes[parameter - 1]

        if mode == '2' {
            process[getPointer(pointer + parameter) + relative] = value
        }
        else if mode == '1' {
            process[pointer + parameter] = value
        }
        else if mode == '0' {
            process[getPointer(pointer + parameter)] = value
        }
        else {
            throw new RuntimeException('Unknown mode ' + mode)
        }
    }

    local Long select(Int parameter, String[] modes) {
        String mode = modes[parameter - 1]

        if mode == '2' {
            return process[getPointer(pointer + parameter) + relative]
        }
        else if mode == '1' {
            return process[pointer + parameter]
        }
        else if mode == '0' {
            return process[getPointer(pointer + parameter)]
        }
        else {
            throw new RuntimeException('Unknown mode ' + mode)
        }
    }

    local Int getPointer(Int pointer) {
        return toInt(process[pointer])
    }

    local Int toInt(Long long) {
        return (long as Number).intValue()
    }

}